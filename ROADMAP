================================================================================

P) Task title: "add 30 SIMD registers support for 256-bit POWER7/8 target"
1) Take quaded 512-bit target as a base and reduce it to paired 256-bit
2) Find place in SIMD target mask (RT_256=4/8), keep 16 regs backend (=1/2)
3) No support for (128-bit) 60 SIMD registers is planned, not portable

================================================================================

A) Task title: "add 30 SIMD registers support for 128/256-bit AVX-512 target"
1) Take current 512-bit target as a base and reduce it to 128/256-bit (VL bits)
2) Find place in SIMD target mask (RT_128=1, RT_256=8), drop old SSE1 support
3) Reserve RT_128=16 and RT_256=4 for AVX1+FMA3 128/256-bit backends (no AVX2)
4) When primary target is 30 regs, secondary is 16 regs AVX1/2 (see ARM-SVE)
   (primary is defined with RT_SIMD, secondary is from 128/256-bit set or both)

================================================================================

S) Task title: "implement ARM-SVE backends with 30 registers (no predicates)"
1) Implement new SVE instructions for 128/256/512/1K4-bit targets (2K8 optional)
2) Find place in SIMD target mask (RT_128/256=2, RT_512/1K4=1)
3) When primary target is SVE, secondary is AArch64 NEON (no per-op switching)
   (primary is defined with RT_SIMD, secondary is from 128/256-bit set or both)

================================================================================

E) Task title: "add 8 SIMD registers full-IEEE support for ARMv7 using VFP"
1) Implement 128-bit SIMD registers/instructions as 4x32-bit VFP (full-IEEE)
2) Emulate currently exposed NEON instructions using VFP variants/fallbacks
3) Use register-offloading to upper bank for 1 mem-arg in load-op instructions
4) Find place in SIMD target mask (RT_128=8)

================================================================================

K) Task title: "use configuration utils (autotools, CMake, etc) for building"
1) Use single build script for all host CPU architectures on Linux
2) Keep cross-compilation on x86-64 Linux hosts (targeting QEMU linux-user mode)

================================================================================

R) Task title: "implement basic run-time generation for existing ASM code-bases"
1) Rewrite ASM_ENTER macro to allocate temporary buffer with code-exec rights
2) Rewrite EMITB / EMITW emitters to write into a memory buffer at cur++ offset
3) Define M to (+/-) depending on static/dynamic code generation (+ llvm switch)
4) Rewrite j** to encode jump-label distances into binary form, track labels
5) Rewrite ASM_LEAVE to type-cast the buffer to a function-pointer, then call it
6) Implement proper buffer management for more advanced versions later

================================================================================

O) Task title: "use 3-operand SIMD instructions in packed/scalar SIMD tests"

================================================================================

T) Task title: "improve SIMD test coverage, add test for SIMD mask-move (mmv)"

================================================================================

C) Task title: "implement SIMD fp32/fp64 converters consistently across targets"

================================================================================

F) Task title: "implement scalar fp compare-to-flags, fp/fp & fp/int converters"

================================================================================

I) Task title: "implement integer SIMD compare-to-mask across all targets"

================================================================================

M) Task title: "add support for trigonometric/randomizer SIMD meta-instructions"

================================================================================

H) Task title: "implement fp16 backends for Xeon Phi Knights Mill and ARMv8.2"

================================================================================

X) Task title: "implement predicated AVX-512/ARM-SVE backends (in *_RX slots)"

================================================================================

L) Task title: "consider SoftFP library integration for full fp16/fp128 support"

================================================================================

Q) Task title: "add support for fp128 backend on POWER9/ISA3.0"

================================================================================

V) Task title: "add support for RISC-V architecture"

================================================================================
