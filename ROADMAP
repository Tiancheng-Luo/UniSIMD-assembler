================================================================================

P) Task title: "add support for new offsetted vector addressing modes on POWER9"
1) Implement new offsetted vector addressing instead of indexed loads/stores
2) Use new load vector with length for an alternative scalar backend over VMX
3) Compactify current POWER7/8 targets into one (not much difference anyways)
4) In which case, POWER7+8 would occupy v1/v4, while POWER9 lands on v2/v8 slots
5) In current scheme: RT_128=4+8, RT_256=1+2, RT_512=1+2, RT_1K4=1+2 are 15-regs
6) In current scheme: RT_128=1+2, RT_256=4+8, RT_512=4+8, RT_1K4=4+8 are 30-regs
7) Optimize existing POWER7+8 indexed vector addressing for 256/512-bit backends
8) Use pre-computed indices in BASE regs to save extra address-calculation above
9) Consider keeping POWER7+8 in v2/v8 slots, while landing POWER9 on v1/v4 (no?)
10) Merge future POWER10 with newly added POWER9, not much difference expected
11) Think about native 256-bit vectors in POWER11, find slot in SIMD target mask
12) Free slots by using RT_REGS=16/32 in makefiles resulting in 4 bits per width

================================================================================

S) Task title: "implement ARM-SVE backends with 30 registers (no predicates)"
1) Implement new SVE instructions for 256/512/1K4/2K8-bit targets (2K8 optional)
2) Find place in SIMD target mask (RT_256=8, RT_512=8, RT_1K4=8) like AVX-512++
3) Expose current and future AVX-512/1K4 30-regs targets in RT_512=4+8/RT_1K4=8
4) In which case, POWER8/9 would still occupy RT_512=1+2 for 15-regs quaded VSX
5) In current scheme: RT_128=4+8, RT_256=1+2, RT_512=1+2, RT_1K4=1+2 are 15-regs
6) In current scheme: RT_128=1+2, RT_256=4+8, RT_512=4+8, RT_1K4=4+8 are 30-regs
7) When primary target is SVE, secondary is AArch64 NEON (no per-op switching)
8) Primary is defined with RT_SIMD (secondary is from 128/256-bit set or both)
9) Make all scalar compare-to-mask-elem non-destructive on AArch64 (optional)
10) Clean up RT_512=1/4, RT_1K4=1 for AVX-512 to match AVX512F profile (Zen3?)

================================================================================

N) Task title: "implement new 128/256-bit 30-regs targets on top of current AVX"
1) Implement register-offloading to memory (SIMD structs) on top of current AVX
2) Add new SIMD compatiblity flag RT_SIMD_COMPAT_256=1/2 for 30-regs with AVX1/2
3) Find place in SIMD target mask (RT_128=1/RT_256=4) for custom 30-regs support
4) Improve mask-jump (mkj*x) instructions for 64-bit SIMD elements (optional)
5) Target 128-bit version to SSE, RT_SIMD_COMPAT_128=2/4/8/16/32 for 30-regs

================================================================================

K) Task title: "use configuration utils (autotools, CMake, etc) for building"
1) Use single build script for all host CPU architectures on Linux
2) Keep cross-compilation on x86-64 Linux hosts (targeting QEMU linux-user mode)

================================================================================
=== >>> === tasks above are planned for the upcoming 1.0.0 milestone === <<< ===
================================================================================

E) Task title: "add 8 SIMD registers full-IEEE support for ARMv7 using VFP"
1) Implement 128-bit SIMD registers/instructions as 4x32-bit VFP (full-IEEE)
2) Emulate currently exposed NEON instructions using VFP variants/fallbacks
3) Use register-offloading to upper bank for 1 mem-arg in load-op instructions
4) Find place in SIMD target mask (RT_128=8), like legacy x86, ARMv7 is 8-regs

================================================================================

G) Task title: "consider 64-bit SIMD emulation with FPRs on PowerPC G5/POWER6"
1) Implement 64-bit SIMD registers/instructions as 2x64-bit FPRs (full-IEEE)
2) Emulate currently exposed SIMD instructions using FPU variants/fallbacks
3) Emulate 64-bit integer SIMD ops using 64-bit BASE registers where possible
4) New 64-bit SIMD backend would complement 32-bit targets in existing slots
5) Expose 16x128/8x256 on PowerPC VMX (v4) instead of 15x128/8x256 for 32-bit
6) Consider implementing 8x256 mode with register-offloading to mem for 64-bit

================================================================================

R) Task title: "implement basic run-time generation for existing ASM code-bases"
1) Rewrite ASM_ENTER macro to allocate temporary buffer with code-exec rights
2) Rewrite EMITB / EMITW emitters to write into a memory buffer at cur++ offset
3) Define M to (+/-) depending on static/dynamic code generation (+ llvm switch)
4) Rewrite j** to encode jump-label distances into binary form, track labels
5) Rewrite ASM_LEAVE to type-cast the buffer to a function-pointer, then call it
6) Implement proper buffer management for more advanced versions later

================================================================================

O) Task title: "use 3-operand SIMD instructions in packed/scalar SIMD tests"

================================================================================

T) Task title: "improve SIMD test coverage, add test for SIMD mask-move (mmv)"

================================================================================

C) Task title: "implement SIMD fp32/fp64 converters consistently across targets"

================================================================================

A) Task title: "implement SIMD fp16 converters as tier-1 extension, modern CPUs"

================================================================================

F) Task title: "implement scalar fp compare-to-flags, fp/fp & fp/int converters"

================================================================================

I) Task title: "implement integer SIMD compare-to-mask across all targets"

================================================================================

M) Task title: "add support for trigonometric/randomizer SIMD meta-instructions"
   (consider sleef library as an example of elementary math functions with SIMD)
   (https://github.com/shibatch/sleef)      <- use this code snapshot as a base

================================================================================

X) Task title: "implement predicated AVX-512/ARM-SVE backends (in *_RX slots)"

================================================================================

H) Task title: "implement fp16 backend on ARMv8.2 as tier-2 extension (no SPMD)"

================================================================================

Q) Task title: "implement fp128 backend on POWER9 as tier-2 extension (no SPMD)"

================================================================================

L) Task title: "consider SoftFP library integration for full fp16/fp128 support"

================================================================================

V) Task title: "add support for various new and existing architectures"
1) Add support for RISC-V architecture with "vector extension proposal"
   (search the Web for "RISC-V vector extension proposal")
2) Add support for Sunway SW26010 with custom Chinese BASE/SIMD ISAs (64-bit)
   (https://en.wikipedia.org/wiki/SW26010)
3) Add support for Loongson 3 (GS464E) with LoongSIMD ops as well as MIPS64r3
   (https://en.wikipedia.org/wiki/Loongson)
   (https://www.imgtec.com/blog/loongson-mips64-processors-performance-barrier/)
4) Add support for SPARC64 VIIIfx HPC-ACE SIMD extensions as well as BASE ops
   (http://www.fujitsu.com/downloads/TC/sparc64viiifx-extensions.pdf)
5) Add support for ELBRUS architecture, emulate SIMD on top of VLIW, have fun!
   (https://en.wikipedia.org/wiki/Elbrus_2000)

================================================================================
