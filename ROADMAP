================================================================================

A) Task title: "add support for AVX1+FMA3 targets for AMD processors (no AVX2)"
1) Reserve RT_128=16 and RT_256=4 for AVX1+FMA3 128/256-bit backends (no AVX2)
2) Improve mask-jump (mkj) instructions for 64-bit SIMD elements (optional)
3) Make all scalar compare-to-mask non-destructive on AArch64 (optional)

================================================================================

P) Task title: "swap legacy 128-bit PowerPC VMX target with POWER7/8 VSX1/2"
1) Keep legacy PowerPC VMX target in RT_P32/P64 arch (32-bit G4, 64-bit POWER6)
2) Rename current 128/256-bit VMX headers to rtarch_p**_128x*v4.h
3) Shift legacy RT_128=1/RT_256_R8=1 SIMD-flag values to RT_128=4/RT_256_R8=4
4) Shift RT_128=2+4 values to RT_128=1+2 for VSX1/2 in POWER7/8, rename headers
5) Shift internal RT_128X1/X2/X4 values to 1+2/1+2+4+8/1+2 respectively
6) Adjust mask_init/from_mask converters in rtbase & SIMD layer in rtzero
7) New RT_128=4 for VMX would correspond to RT_128X1=4 (1+2 occupied by VSX1/2)
8) New RT_256_R8=4 for VMX would correspond to RT_128X2=16 (1+2+4+8 occupied)
9) Compatibility break with current 0.x.x versions in SIMD flags (=> 1.0.0)

================================================================================

S) Task title: "implement ARM-SVE backends with 30 registers (no predicates)"
1) Implement new SVE instructions for 256/512/1K4/2K8-bit targets (2K8 optional)
2) Find place in SIMD target mask (RT_256=8, RT_512=8, RT_1K4=8) like AVX-512++
3) Expose current and future AVX-512/1K4 30-regs targets in RT_512=4+8/RT_1K4=8
4) In which case, POWER7/8 would still occupy RT_512=1+2 for 15-regs quaded VSX
5) In the new scheme: RT_128=4+8, RT_256=1+2, RT_512=1+2, RT_1K4=1+2 are 15-regs
6) In the new scheme: RT_128=1+2, RT_256=4+8, RT_512=4+8, RT_1K4=4+8 are 30-regs
7) Unallocated slots above can be occupied by legacy targets (SSE2, AVX1+FMA3)
8) When primary target is SVE, secondary is AArch64 NEON (no per-op switching)
   (primary is defined with RT_SIMD, secondary is from 128/256-bit set or both)

================================================================================

E) Task title: "add 8 SIMD registers full-IEEE support for ARMv7 using VFP"
1) Implement 128-bit SIMD registers/instructions as 4x32-bit VFP (full-IEEE)
2) Emulate currently exposed NEON instructions using VFP variants/fallbacks
3) Use register-offloading to upper bank for 1 mem-arg in load-op instructions
4) Find place in SIMD target mask (RT_128=8) <- like legacy x86, ARMv7 is 8-regs

================================================================================

K) Task title: "use configuration utils (autotools, CMake, etc) for building"
1) Use single build script for all host CPU architectures on Linux
2) Keep cross-compilation on x86-64 Linux hosts (targeting QEMU linux-user mode)

================================================================================

R) Task title: "implement basic run-time generation for existing ASM code-bases"
1) Rewrite ASM_ENTER macro to allocate temporary buffer with code-exec rights
2) Rewrite EMITB / EMITW emitters to write into a memory buffer at cur++ offset
3) Define M to (+/-) depending on static/dynamic code generation (+ llvm switch)
4) Rewrite j** to encode jump-label distances into binary form, track labels
5) Rewrite ASM_LEAVE to type-cast the buffer to a function-pointer, then call it
6) Implement proper buffer management for more advanced versions later

================================================================================

O) Task title: "use 3-operand SIMD instructions in packed/scalar SIMD tests"

================================================================================

T) Task title: "improve SIMD test coverage, add test for SIMD mask-move (mmv)"

================================================================================

C) Task title: "implement SIMD fp32/fp64 converters consistently across targets"

================================================================================

F) Task title: "implement scalar fp compare-to-flags, fp/fp & fp/int converters"

================================================================================

I) Task title: "implement integer SIMD compare-to-mask across all targets"

================================================================================

M) Task title: "add support for trigonometric/randomizer SIMD meta-instructions"

================================================================================

H) Task title: "implement fp16 backends for Xeon Phi Knights Mill and ARMv8.2"

================================================================================

X) Task title: "implement predicated AVX-512/ARM-SVE backends (in *_RX slots)"

================================================================================

L) Task title: "consider SoftFP library integration for full fp16/fp128 support"

================================================================================

Q) Task title: "add support for fp128 backend on POWER9/ISA3.0"

================================================================================

V) Task title: "add support for RISC-V architecture"

================================================================================
