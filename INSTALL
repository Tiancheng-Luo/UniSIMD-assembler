================================================================================

To build SIMD test framework on Linux, open terminal window,
go to UniSIMD's test folder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f simd_make_x86.mk
    ./simd_test.x86
run for x64 architecture:
    make -f simd_make_x64.mk
    ./simd_test.x64f32
run for non-x86 architectures:
    make -f simd_make_***.mk
    ./simd_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build SIMD test framework on Windows,
go to UniSIMD's test folder and open:
    simd_workspace.dsw
in Visual C++ 6.0 or later. In newer versions of VC++ agree to convert
workspace files (exit and open newly created solution file for development).
Select "Release" build target in drop-down list/menus, then press F5.

To build SIMD test framework for 64-bit Windows,
download and install TDM64-GCC toolchain (tdm64-gcc-5.1.0-2.exe),
then open UniSIMD's test folder and run (from Windows UI):
    simd_make_w64.bat
produced simd_test_w64f32.exe binary file will launch upon build completion.

================================================================================

To build QEMU emulator from source on Linux, download the latest version from
    http://wiki.qemu.org/Download
and unpack the archive, open terminal window, go to QEMU's root folder,
make sure necessary tools and libraries are installed:
    sudo apt-get install make g++ zlib1g-dev libglib2.0-dev libpixman-1-dev
run configure script:
    ./configure
run multithreaded make:
    make -j8
run installation script:
    sudo make install

When building QEMU from source isn't necessary install a full binary package:
    sudo apt-get install qemu

================================================================================
