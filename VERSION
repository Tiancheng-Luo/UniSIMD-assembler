v0.7.1: Unified SIMD Assembler, 64/32-bit hybrid mode for native 64-bit ABI
  - use fixed-sized and adjustable integer types in rtbase and SIMD test
  - add a64 (AArch64 native ABI) and x64 (x86_64 native ABI) targets/makefiles
  - add m64 (MIPS64 native ABI) and p64 (Power64 native ABI) targets/makefiles
  - most of the current ISA remains 32-bit for BASE and SIMD with few exceptions
  - adjust backend structures to support 64-bit pointer types in select places
  - move sys_alloc/sys_free to platform-specific sections in SIMD test
  - implement custom allocators (mmap) to limit address range to 32-bit (Linux)
  - limit address range to 2GB boundary as MIPS64 sign-extends 32-bit mem-loads
  - treat code labels as 64-bit in label_ld/st and jmpxx_mm instructions
  - implement 64-bit versions of stack_sa/la instructions on MIPS and Power
  - fix variable SIMD shifts to support little-endian on Power targets
  - fix ASM blocks to only use SIMD registers within VRSAVE segment on Power
  - remove ASM block's zeroing of r15 as unnecessary on x32/x64 targets
  - reformat/rework ASM blocks to better respect internal register mapping
  - explicitly save/load SIMD registers in ASM blocks across all targets
  - drop ASM clobber lists for lack of consistency across targets/SIMD-widths
  - fix clang's ASM block l-value errors and other warnings, official support
  - add build instructions to makefiles for Ubuntu 16.04 LTS 64-bit Live CD
  - fix divps_ld instruction's encoding on ARM (fixes CORE test 15 with -a)
  - use IEEE-compatible div/sqr on legacy ARM and Power (CORE test 14 with -a)

v0.7: Unified SIMD Assembler, additional 32-bit CPU architectures
  - add a32 (AArch64:ILP32 ABI) and x32 (x86_64:mx32 ABI) targets/makefiles
  - add m32 (MIPS32r5/r6 + MSA) and p32 (Power + VMX/VSX) targets/makefiles
  - add yet another SIMD variant (v4) for x86/SSE4.1 and ARMv8/AArch32
  - separate ARMv7/ASIMDv2 (v2) and ARMv8/AArch32 (v4) SIMD variants on ARM
  - add ARM builds for Raspberry Pi 2 and 3 in addition to Nokia N900
  - use static linking in SIMD tests for QEMU emulation
  - add mmv (blendvps) to x86/x32 SSE4.1 for fast conditional loads
  - add combined-compare-jumps to rtarch for better efficiency (MIPS, Power)
  - remove limitation for BASE instructions to only accept DP offsets
  - add new immediate/displacement types, add comment that they are unsigned
  - add comments throughout rtarch about instructions' set-flags behavior
  - implement full-range 32-bit integer divide on ARMv7 (v1) as 64-bit fp-div
  - add widening versions of integer multiply instructions to rtarch definitions
  - add remainder wrappers for integer divide instructions to rtarch definitions
  - add IEEE-compatible versions of fp div & sqr for ARMv7 and Power targets
  - add "residual correction" to non-IEEE fp div on ARMv7 and Power targets
  - add SIMD tests for fp-to-int round and int-div remainder, run level 18

v0.6: Unified SIMD Assembler, additional SIMD targets
  - rename SIMD target files to reflect SIMD width
  - enable SIMD instructions definitions only if RT_SIMD_CODE is defined
  - add new SIMD targets for SSE1, AVX1, AVX2 with corresponding build flags
  - add float-to-integer convert with explicit mode parameter (x86, AArch32)
  - add signed-integer-divide native instruction for ARM's AArch32 mode
  - add SIMD test for shifts by runtime value & BASE register, run level 16
  - add ver (cpuid) instruction for runtime SIMD target selection (x86 only)
  - add mmv (vmaskmov) to AVX backend for fast conditional loads/stores
  - add BASE instructions sub-tests to SIMD test if RT_BASE_TEST is defined
  - drop set-flags bit (slow) from BASE mul instructions on ARM
  - add RT_SIMD_FAST_FCTRL to save 1 instruction on FCTRL blocks entry
  - clarify current and future targets in rtarch (from here backported down)
  - add xor & neg BASE instructions to rtarch
  - add shifts by fixed BASE register instructions
  - add register versions of BASE mul/div, remainder instructions
  - add SIMD cvzps instruction for fp-to-int round-towards-zero conversion
  - add ASM_ENTER_F/ASM_LEAVE_F/ROUND*_F for non-IEEE flush-to-zero SIMD mode
  - add RT_SIMD_FLUSH_ZERO to enable faster non-IEEE flush-to-zero SIMD mode
  - add ASM_INIT/ASM_DONE to manage root info structure
  - make stack pointer register architecturally invisible
  - replace non-standard malloc.h with stdlib.h for malloc/free
  - clean up rtarch whitespace formatting

v0.5: Unified SIMD Assembler, API freeze for the engine
  - instructions naming scheme finalized
  - change ARM instructions to set flags
  - added framework for internal constants (used by reciprocals)
  - added SIMD instruction for cube root, reciprocal steps redesigned
  - additional SIMD tests, run level 15

v0.4: SIMD test framework, macro assembler overhaul
  - macro expansion reworked for better compiler compatibility
  - immediate/displacement parameters handling redesigned
  - added reciprocal support for SSE, MPE support refined

v0.3: SIMD test framework, run level 9
  - tests for integer mul, div, jmp instructions
  - SIMD tests for integer add, shl, shr instructions
  - SIMD tests for cvt, sqr, rsq instructions

v0.2: SIMD test framework, run level 5
  - SIMD tests for mul, div, cmp instructions

v0.1: SIMD test framework, run level 1
  - SIMD tests for add, sub instructions

v0.0: Empty project
  - initial file set and directory structure
